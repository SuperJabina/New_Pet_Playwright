name: UI tests

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches:
      - main

jobs:
  run-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: ["firefox", "webkit"]
      fail-fast: false  # Prevent cancellation of other matrix jobs if one fails

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Copy .ci_env to .env
        run: |
          if [ -f .ci_env ]; then
            cp .ci_env .env
          else
            echo "No .ci_env file found, creating .env with defaults"
            echo "APP_URL=https://demoqa.com/" > .env
            echo "HEADLESS=True" >> .env
            echo "WINDOW_SIZE={\"width\":1920,\"height\":1080}" >> .env
            echo "SLOW=200" >> .env
            echo "LOCAL=ru-RU" >> .env
            echo "VIDEOS_DIR=./videos" >> .env
            echo "TRACING_DIR=./tracing" >> .env
            echo "SCREENSHOTS_DIR=./screenshots" >> .env
            echo "EXPECT_TIMEOUT=5000" >> .env
            echo "REMOTE_BROWSER=${{ secrets.REMOTE_BROWSER_URL }}" >> .env
          fi

      - name: Debug .env contents
        run: |
          echo "Contents of .env:"
          cat .env

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install --with-deps

      - name: Install Allure Commandline
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.30.0/allure-2.30.0.zip || { echo "Failed to download Allure"; exit 1; }
          ls -la
          if [ ! -f allure-2.30.0.zip ]; then
            echo "Allure zip file not found!"
            exit 1
          fi
          unzip allure-2.30.0.zip -d allure || { echo "Failed to unzip Allure"; exit 1; }
          ls -la allure
          ls -la allure/bin || { echo "allure/bin directory not found!"; exit 1; }
          if [ -f allure/bin/allure ]; then
            chmod +x allure/bin/allure
          else
            echo "allure/bin/allure not found!"
            exit 1
          fi
          echo "$(pwd)/allure/bin" >> $GITHUB_PATH
          echo "PATH after adding Allure: $PATH"
          which allure || echo "Allure not found in PATH"

      - name: Run UI tests with pytest and generate Allure results
        env:
          BROWSER_NAME: ${{ matrix.browser }}
        run: |
          pytest -m regression --alluredir=allure-results-${{ matrix.browser }} --numprocesses 2 || echo "Tests failed, continuing..."
        continue-on-error: true

      - name: Debug Allure results
        run: |
          echo "Contents of allure-results-${{ matrix.browser }}:"
          ls -la allure-results-${{ matrix.browser }} || echo "No Allure results found"

      - name: Generate Allure report
        run: |
          mkdir -p allure-report-${{ matrix.browser }}
          allure generate allure-results-${{ matrix.browser }} -o allure-report-${{ matrix.browser }} --clean || echo "Failed to generate Allure report"
          ls -la allure-report-${{ matrix.browser }} || echo "No Allure report generated"

      - name: Upload Allure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ matrix.browser }}
          path: allure-report-${{ matrix.browser }}
        continue-on-error: true

  publish-report:
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Configure Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Initialize gh-pages branch if it doesn't exist
        run: |
          git fetch origin gh-pages || true
          if ! git rev-parse --verify origin/gh-pages >/dev/null 2>&1; then
            git checkout --orphan gh-pages
            mkdir -p allure-history
            git add allure-history
            git commit --allow-empty -m "Initialize gh-pages branch for Allure reports"
            git push origin gh-pages
          fi

      - name: Check out gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true

      - name: Download Allure reports
        uses: actions/download-artifact@v4
        with:
          path: allure-reports
        continue-on-error: true

      - name: Debug downloaded reports
        run: |
          echo "Contents of allure-reports:"
          ls -la allure-reports || echo "No reports downloaded"
          ls -la allure-reports/* || echo "No subdirectories in allure-reports"

      - name: Merge Allure reports
        if: always()
        run: |
          mkdir -p gh-pages/allure-history
          # Check if reports exist before copying
          if ls allure-reports/*/index.html >/dev/null 2>&1; then
            for report in allure-reports/*/index.html; do
              cp -r "$(dirname "$report")"/* gh-pages/allure-history/
            done
          else
            echo "No Allure reports found to merge"
          fi
          ls -la gh-pages/allure-history || echo "No files in gh-pages/allure-history"

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: gh-pages/allure-history